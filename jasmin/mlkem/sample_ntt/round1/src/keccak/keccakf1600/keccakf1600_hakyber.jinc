
inline
fn __index(inline int x, inline int y) -> inline int {
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}

inline
fn __ROL64(reg u64 x, inline int c) -> reg u64 {
  reg u64 y;
  _, _, y = #ROL_64(x, c);
  return y;
}

inline
fn __theta(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y;
  reg u64[5] c, d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {
    /* d[x] = __ROL64(c[(x + 1) % 5], 1); */
    /* extraction fails */

    /*    _, _, d[x] = #ROL_64(c[(x + 1) % 5], 1);*/
    /*    d[x] ^= c[(x + 4) % 5];*/
    /* does not compile */

    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}

inline
fn __keccakRhoOffsets(inline int i) -> inline int {
  inline int r, x, y, z, t;

  r = 0;
  x = 1;
  y = 0;
  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}

inline
fn __rho(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y, i, z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = __index(x, y);
      z = __keccakRhoOffsets(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}

inline
fn __pi(reg ptr u64[25] a) -> reg ptr u64[25] {
  stack u64[25] b;
  reg u64 t;
  inline int x, y, i;
  for i = 0 to 25 { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = __index(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}

inline
fn __chi(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y, i;
  reg u64[5] c;
  for y = 0 to 5 {
    for x = 0 to 5 {
      i = __index(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = __index(x + 2, y);
      c[x] &= a[i];
      i = __index(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}

inline
fn __iota(reg ptr u64[25] a, reg u64 c) -> reg ptr u64[25] {
  a[0] ^= c;
  return a;
}

u64[24] roundconstants = {0x0000000000000001, 0x0000000000008082, 0x800000000000808a, 0x8000000080008000, 
                          0x000000000000808b, 0x0000000080000001, 0x8000000080008081, 0x8000000000008009, 
                          0x000000000000008a, 0x0000000000000088, 0x0000000080008009, 0x000000008000000a, 
                          0x000000008000808b, 0x800000000000008b, 0x8000000000008089, 0x8000000000008003, 
                          0x8000000000008002, 0x8000000000000080, 0x000000000000800a, 0x800000008000000a, 
                          0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008};

fn _keccakf1600_(reg ptr u64[25] state) -> reg ptr u64[25] {
  // inline int round; // commented to remove warning
  reg ptr u64[24] constptr;

  reg u64 rctr c;
  
  constptr = roundconstants;
  rctr = 0;

  while (rctr < 192) {
    state = __theta(state);
    state = __rho(state);
    state = __pi(state);
    state = __chi(state);
    constptr = roundconstants;
    //state = __iota(state, constptr.[(int)rctr]); // updated to remove warning
      c = constptr.[(int)rctr];
      state = __iota(state, c);

    rctr += 8;
  }

  return state;
}


inline fn _keccakf1600(reg ptr u64[25] a) -> reg ptr u64[25]
{
  a = a;
  a = _keccakf1600_(a);
  a = a;
  return a;
}
