from Stdlib require "comparisons.jinc"
from Stdlib require "swaps.jinc"
from Keccak require "keccakf1600/keccakf1600_bmi1_compact.jinc"

require "params.jinc"
require "gen_matrix_ref_spills.jinc"


// xof related code

inline fn xof_init(
  reg ptr u64[25] state,
  reg const ptr u8[32] rho,
  reg u16 index)
  ->
  reg ptr u64[25]
{
  inline int i;
  reg u64 t;

  // copy rho sto state
  for i=0 to 4
  { t = rho[u64 i];
    state[i] = t; }

  // init to zero
  t = 0;
  for i=4 to 25
  { state[i] = t; }

  // complete the state initialization
  state[u16 16]  = index;
  state[u8 34]  ^= 0x1F;
  state[u8 167] ^= 0x80;

  return state; 
}

inline fn xof_next_bytes(
  reg ptr u64[25] state)
  ->
  reg ptr u64[21],
  reg ptr u64[25]
{
  reg ptr u64[21] b168;
  state = _keccakf1600(state);
  b168 = state[0:21];
  return b168, state;
}

inline fn xof_next_bytes_x3(
  reg ptr u64[25] state)
  ->
  stack u64[21*3],
  reg ptr u64[25]
{
  stack u64[21*3] b168x3;
  inline int n;
  reg u64 i t;

  for n=0 to 3 // there are no scalar/#mmx registers available
  {
    state = _keccakf1600(state);

    i = 0;
    while(i < 21)
    { t = state[(int)i];
      b168x3[n*21 + (int) i] = t;
      i += 1;
    }
  }

  return b168x3, state;
}


// 'sample' implementation from crypto-specs/ml-kem/Sampling.ec

inline fn gen_matrix_sample_get_two_words(
  reg ptr u64[21] b168,
  reg u64 k)
  ->
  reg u16,
  reg u16,
  reg u64
{
  reg u16 bi bi1 bi2 d1 d2;

  bi  = (16u) b168[u8 (int)k];
  bi1 = (16u) b168[u8 (int)k + 1];
  bi2 = (16u) b168[u8 (int)k + 2];
  k += 3;

  // d1 <- to_uint bi + 256 * (to_uint bi1 %% 16);
  d1 = bi1; d1 &= 15; d1 <<= 8; d1 |= bi;

  //d2 <- to_uint bi1 %/ 16 + 16  *  to_uint bi2;
  d2 = bi1 >> 4; bi2 <<= 4; d2 |= bi2;

  // note that 'd2 = bi1 >> 4;' is just a variable renaming (d2 and bi1 are
  // merged during compilation)

  return d1, d2, k;
}

fn gen_matrix_sample_iterate_generic(
  reg u64 j,
  reg ptr u64[21] b168,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg u64 matrix_offset)
  ->
  reg u64,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N],
  reg u64
{
  reg u16 d1 d2;
  reg u64 k;
  reg bool c_loop c_d1 c_d2 c_j;
  #msf reg u64 ms;

  ms = #init_msf();
  
  k = 0;
  while { c_loop = comp_u64_l_int_and_u64_l_int(j, KYBER_N, k, 168); } 
        (c_loop)
  {
    ms = #update_msf(c_loop, ms);

    d1, d2, k = gen_matrix_sample_get_two_words(b168, k);

    d1 = #protect_16(d1, ms);
    d2 = #protect_16(d2, ms);

    // if (d1 < q)
    c_d1 = (d1 < KYBER_Q);
    if (c_d1)
    { ms = #update_msf(c_d1, ms);

      matrix[(int) matrix_offset] = d1;
      matrix_offset += 1;
      j += 1;

    } else { ms = #update_msf(!c_d1, ms); }

    // if ((d2 < q) && (j < 256))
    c_d2 = (d2 < KYBER_Q);
    if(c_d2)
    { ms = #update_msf(c_d2, ms);
      
      c_j = (j < KYBER_N);
      if(c_j)
      { ms = #update_msf(c_j, ms);
      
        matrix[(int) matrix_offset] = d2;
        matrix_offset += 1;
        j += 1;
      } else { ms = #update_msf(!c_j, ms); }
    } else { ms = #update_msf(!c_d2, ms); }
  }
  ms = #update_msf(!c_loop, ms);

  return j, matrix, matrix_offset;
}

fn gen_matrix_sample_iterate_x3(
  reg u64 j,
  reg ptr u64[21*3] b168x3,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg u64 matrix_offset)
  ->
  reg u64,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N],
  reg u64
{
  inline int x y;
  reg u64[3] t;
  reg u64[2] b;
  reg u16[5] d;
  reg u16 d1 d2;
  reg u64 k;
  reg bool c_loop c_k c_dy c_d0 c_d1 c_d2 c_j;
  reg ptr u64[21] b168;
  #msf reg u64 ms;  

  // we have 168 bytes * 3, 4032 bits in b168x3
  // at 12 bits per element, and to just go over 256 elements (to avoid complex
  // condition in if) we need to go over 3072 bits / 384 bytes / 48 64-bit words
  // from b168x3. The following loop executes 16 times (consumes 3 words at a time).

  ms = #init_msf();

  k = 0;
  while { c_k = (k < 48); } (c_k)
  {
    ms = #update_msf(c_k, ms);

    t[0] = b168x3[(int) k];
    t[1] = b168x3[(int) k + 1];
    t[2] = b168x3[(int) k + 2];
    k += 3;

    t[0] = #protect(t[0], ms);
    t[1] = #protect(t[1], ms);
    t[2] = #protect(t[2], ms);

    // note: t1 || t2 || t3 : 24 bytes / 192 bits; each 'd' is 12 bits;
    // we can check 16 'd' with these variables
    for x=0 to 3
    { 
      for y=0 to 5
      { d[y] = (16u) t[x];
        t[x] >>= 12;
        d[y] &= 0xFFF;

        c_dy = (d[y] < KYBER_Q);
        if(c_dy)
        { ms = #update_msf(c_dy, ms);
          
          matrix[(int) matrix_offset] = d[y];
          matrix_offset += 1;
          j += 1;

        } else { ms = #update_msf(!c_dy, ms); }
      }

      // the following statements can be generalized, but not sure if it helps
      // or not with the proofs; #checkme later;
      #inline
      if(x == 0)
       { b[0] = t[1]; t[1] <<= 4; t[1] |= t[0]; b[0] >>= 56; }
      else {
       #inline
       if(x == 1)
       { b[1] = t[2]; t[2] <<= 8; t[2] |= b[0]; b[1] >>= 52; }
      }

    }

    // at this point there are 12 bits in b[1]
    d[0] = (16u) b[1];

    c_d0 = (d[0] < KYBER_Q);
    if(c_d0)
    { ms = #update_msf(c_d0, ms);

      matrix[(int) matrix_offset] = d[0];
      matrix_offset += 1;
      j += 1;

    } else { ms = #update_msf(!c_d0, ms); }
  }

  ms = #update_msf(!c_k, ms);

  // k == 48, which in bytes means 384
  // since we already went over 21+21 words from the first two states, we are
  // in the 6th word of 3rd b168. The corresponding offset in bytes is 6*8, 
  // which is 48. Since k is already 48 let it be.

  b168 = b168x3[21*2:21];

  while { c_loop = comp_u64_l_int_and_u64_l_int(j, KYBER_N, k, 168); } 
        (c_loop)
  {
    ms = #update_msf(c_loop, ms);

    d1, d2, k = gen_matrix_sample_get_two_words(b168, k);

    d1 = #protect_16(d1, ms);
    d2 = #protect_16(d2, ms);

    // if (d1 < q)
    c_d1 = (d1 < KYBER_Q);
    if (c_d1)
    { ms = #update_msf(c_d1, ms);

      matrix[(int) matrix_offset] = d1;
      matrix_offset += 1;
      j += 1;

    } else { ms = #update_msf(!c_d1, ms); }

    // if ((d2 < q) && (j < 256))
    c_d2 = (d2 < KYBER_Q);
    if(c_d2)
    { ms = #update_msf(c_d2, ms);
      
      c_j = (j < KYBER_N);
      if(c_j)
      { ms = #update_msf(c_j, ms);
      
        matrix[(int) matrix_offset] = d2;
        matrix_offset += 1;
        j += 1;

      } else { ms = #update_msf(!c_j, ms); }
    } else { ms = #update_msf(!c_d2, ms); }
  }
  ms = #update_msf(!c_loop, ms);

  return j, matrix, matrix_offset;
}

fn gen_matrix_sample_finish(
  reg u64 j,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg u64 matrix_offset,
  reg ptr u64[25] xof_state)
  ->
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N],
  reg u64,
  reg ptr u64[25]
{
  // spills
  #mmx reg u64 j_s;
  #mmx reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix_s;
  #mmx reg u64 matrix_offset_s;

  // local variables
  reg ptr u64[21] b168;

  while(j < KYBER_N)
  {
    j_s, matrix_s, matrix_offset_s = spill_gen_matrix_sample(j, matrix, matrix_offset);

    b168, xof_state = xof_next_bytes(xof_state);

    j, matrix, matrix_offset = unspill_gen_matrix_sample(j_s, matrix_s, matrix_offset_s);

    j, matrix, matrix_offset = gen_matrix_sample_iterate_generic(j, b168, matrix, matrix_offset);
  }

  return matrix, matrix_offset, xof_state;
}

inline fn gen_matrix_sample(
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg u64 matrix_offset,
  reg mut ptr u64[25] xof_state)
  ->
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N],
  reg u64
{
  // spills
  #mmx reg u64 j_s;
  #mmx reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix_s;
  #mmx reg u64 matrix_offset_s;

  // local variables
  reg u64 j;
  stack u64[21*3] _b168x3;
  reg ptr u64[21*3] b168x3;

  j = 0;

  j_s, matrix_s, matrix_offset_s = spill_gen_matrix_sample(j, matrix, matrix_offset);

  _b168x3, xof_state = xof_next_bytes_x3(xof_state);

  j, matrix, matrix_offset = unspill_gen_matrix_sample(j_s, matrix_s, matrix_offset_s);

  b168x3 = _b168x3;
  j, matrix, matrix_offset = gen_matrix_sample_iterate_x3(j, b168x3, matrix, matrix_offset);

  matrix, matrix_offset, _ = gen_matrix_sample_finish(j, matrix, matrix_offset, xof_state);

  return matrix, matrix_offset;
}

inline fn gen_matrix_get_index(reg u64 i j t) -> reg u16
{
  reg u16 index;

  i, j = swap_u64_u64_u64(i, j, t);
  index   = (16u) i;
  index <<= 8;
  index  |= (16u) j;
  
  return index;
}


// code from InnerPKE.ec

fn gen_matrix_sample_one_polynomial(
  reg u64 i,
  reg u64 j,
  reg u64 transposed,
  reg ptr u8[32] rho,
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg u64 matrix_offset)
  ->
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N],
  reg u64
{
  // local variables
  stack u64[25] _xof_state;
  reg ptr u64[25] xof_state;
  reg u16 index;

  xof_state = _xof_state;

  index = gen_matrix_get_index(i, j, transposed);

  // XOF.init(rho, j, i);
  xof_state = xof_init(xof_state, rho, index);

  // c <@ Parse(XOF).sample(); a.[(i,j)] <- c;
  matrix, matrix_offset = gen_matrix_sample(matrix, matrix_offset, xof_state);

  return matrix, matrix_offset;      
}

// assumes rho with 32 bytes
fn _gen_matrix(
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N] matrix,
  reg ptr u8[32] rho,
  reg u64 transposed)
  ->
  reg ptr u16[KYBER_K * KYBER_K * KYBER_N]
{
  // spills
  #mmx reg u64 i_s j_s transposed_s;
  #mmx reg ptr u8[KYBER_SYMBYTES] rho_s;

  // local variables
  reg u64 i j matrix_offset;

  matrix_offset = 0;
  i = 0;
  while (i < KYBER_K)
  { j = 0;
    while (j < KYBER_K)
    {
      i_s, j_s, transposed_s, rho_s = spill_gen_matrix(i, j, transposed, rho);

      matrix, matrix_offset = gen_matrix_sample_one_polynomial(i, j, transposed, rho, matrix, matrix_offset);

      i, j, transposed, rho = unspill_gen_matrix(i_s, j_s, transposed_s, rho_s);

      j += 1;
    }
    i += 1;
  }  

  return matrix;
}

