require "reduce4.jinc"

inline fn __mul4_c0
( reg u64    f0,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;
  reg u64[4] h r;

  (h[1], h[0]) = #MULX ( f0, g[0] );

  ( h[2], lo ) = #MULX ( f0, g[1] );
    cf, h[1]   = #ADCX ( h[1], lo, cf );

  ( h[3], lo ) = #MULX ( f0, g[2] );
    cf, h[2]   = #ADCX ( h[2], lo, cf );

  ( r[0], lo ) = #MULX ( f0, g[3] );
    cf, h[3]   = #ADCX ( h[3], lo, cf );

  cf, r[0] = #ADCX ( r[0], z, cf ); // cf = 0

  return h, r, cf, of;
}

inline fn __mul4_c1
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[1]     = #ADOX ( h[1], lo, of );
  cf, h[2]     = #ADCX ( h[2], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( r[1], lo ) = #MULX ( f, g[3] );
  of, r[0]     = #ADOX ( r[0], lo, of);

  cf, r[1]     = #ADCX ( r[1], z, cf);
  of, r[1]     = #ADOX ( r[1], z, of);

  return h, r, cf, of;
}

inline fn __mul4_c2
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, r[0]     = #ADOX ( r[0], lo, of );
  cf, r[1]     = #ADCX ( r[1], hi, cf );

  ( r[2], lo ) = #MULX ( f, g[3] );
  of, r[1]     = #ADOX ( r[1], lo, of);

  cf, r[2]     = #ADCX ( r[2], z, cf);
  of, r[2]     = #ADOX ( r[2], z, of);

  return h, r, cf, of;
}

inline fn __mul4_c3
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, r[0]     = #ADOX ( r[0], lo, of );
  cf, r[1]     = #ADCX ( r[1], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, r[1]     = #ADOX ( r[1], lo, of );
  cf, r[2]     = #ADCX ( r[2], hi, cf );

  ( r[3], lo ) = #MULX ( f, g[3] );
  of, r[2]     = #ADOX ( r[2], lo, of);

  cf, r[3]     = #ADCX ( r[3], z, cf);
  of, r[3]     = #ADOX ( r[3], z, of);

  return h, r, cf, of;
}

inline fn __mul4_rsr(stack u64[4] fs, reg u64[4] g) -> reg u64[4]
{
  reg bool cf of;
  reg u64[4] h r;
  reg u64 _38 f z;

  of, cf, _, _, _, z = #set0();

  f = fs[0];
  h, r, cf, of = __mul4_c0(      f, g, z, cf, of);

  f = fs[1];
  h, r, cf, of = __mul4_c1(h, r, f, g, z, cf, of);

  f = fs[2];
  h, r, cf, of = __mul4_c2(h, r, f, g, z, cf, of);

  f = fs[3];
  h, r, cf, of = __mul4_c3(h, r, f, g, z, cf, of);

  _38 = 38;
  h = __reduce4(h, r, _38, z, cf, of);

  return h;
}

inline fn __mul4_rpr(reg ptr u64[4] fp, reg u64[4] g) -> reg u64[4]
{
  reg bool cf of;
  reg u64[4] h r;
  reg u64 _38 f z;

  of, cf, _, _, _, z = #set0();

  f = fp[0];
  h, r, cf, of = __mul4_c0(      f, g, z, cf, of);

  f = fp[1];
  h, r, cf, of = __mul4_c1(h, r, f, g, z, cf, of);

  f = fp[2];
  h, r, cf, of = __mul4_c2(h, r, f, g, z, cf, of);

  f = fp[3];
  h, r, cf, of = __mul4_c3(h, r, f, g, z, cf, of);

  _38 = 38;
  h = __reduce4(h, r, _38, z, cf, of);

  return h;
}

fn _mul4_rpr(reg ptr u64[4] fp, reg u64[4] g) -> reg u64[4]
{
  reg u64[4] h;

  h = __mul4_rpr(fp, g);

  return h;
}

inline fn _mul4_rsr_(stack u64[4] _fs, reg u64[4] _g) -> reg u64[4]
{
  reg ptr u64[4] fp;
  reg u64[4] _h h g;

  fp = _fs;
  g = #copy(_g);
  h = _mul4_rpr(fp, g);
  _h = #copy(h);

  return _h;
}

inline fn __mul4_ssr(stack u64[4] fs, reg u64[4] g) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h;

  h = __mul4_rsr(fs, g);
  hs = #copy(h);

  return hs;
}

inline fn __mul4_sss(stack u64[4] fs gs) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h g;

  g = #copy(gs);
  h = __mul4_rsr(fs, g);
  hs = #copy(h);

  return hs;
}

inline fn __mul4_rss(stack u64[4] fs gs) -> reg u64[4]
{
  reg u64[4] h g;

  g = #copy(gs);
  h = __mul4_rsr(fs, g);

  return h;
}

// ////////////////////////////////////////////////////////////////////////////

inline fn __mul4_a24_rs(stack u64[4] fs, inline u64 a24) -> reg u64[4]
{
  inline int i;
  reg bool cf;
  reg u64[4] h;
  reg u64 c r0 lo;

  c = a24;

  (h[1], h[0]) = #MULX(c, fs[0]);
  (h[2], lo)   = #MULX(c, fs[1]);

  cf, h[1] += lo;

  (h[3], lo)   = #MULX(c, fs[2]);

  cf, h[2] += lo + cf;

  (r0,   lo)   = #MULX(c, fs[3]);

  cf, h[3] += lo + cf;

     _, r0 += 0 + cf;

  _, _, _, _, _, r0 = #IMULri (r0, 38);

  cf, h[0] += r0;
  cf, h[1] += 0 + cf;
  cf, h[2] += 0 + cf;
  cf, h[3] += 0 + cf;

  _, c -= c - cf;

  c &= 38;
  h[0] += c;

  return h;
}

inline fn __mul4_a24_ss(stack u64[4] fs, inline u64 a24) -> stack u64[4]
{
  stack u64[4] hs;
  reg u64[4] h;

  h = __mul4_a24_rs(fs, a24);
  hs = #copy(h);

  return hs;
}

