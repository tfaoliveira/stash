require "mul4.jinc"
require "sqr4.jinc"

inline fn __invert4(stack u64[4] fs) -> stack u64[4]
{
  stack u64[4] t0s t1s t2s t3s;
  reg u32 i;

  // z2 = z1^2^1
  t0s = _sqr4_ss_(fs);

  // z8 = z2^2^2
  t1s = _sqr4_ss_(t0s);
  t1s = _sqr4_s_(t1s);

  // z9 = z1*z8
  t1s = _mul4_ss_(t1s, fs);

  // z11 = z2*z9
  t0s = _mul4_ss_(t0s,t1s);

  // z22 = z11^2^1
  t2s = _sqr4_ss_(t0s);

  // z_5_0 = z9*z22
  t1s = _mul4_ss_(t1s,t2s);

  // z_10_5 = z_5_0^2^5
  t2s = _sqr4_ss_(t1s);
  i = 4;
  t2s = _it_sqr4_s_(t2s, i);

  // z_10_0 = z_10_5*z_5_0
  t1s = _mul4_ss_(t1s,t2s);

  // z_20_10 = z_10_0^2^10
  i = 10;
  t2s = _it_sqr4_ss_(t2s, t1s, i);

  // z_20_0 = z_20_10*z_10_0
  t2s = _mul4_ss_(t2s, t1s);

  // z_40_20 = z_20_0^2^20
  i = 20;
  t3s = _it_sqr4_ss_(t3s, t2s, i);

  // z_40_0 = z_40_20*z_20_0
  t2s = _mul4_ss_(t2s,t3s);

  // z_50_10 = z_40_0^2^10
  i = 10;
  t2s = _it_sqr4_s_(t2s, i);

  // z_50_0 = z_50_10*z_10_0
  t1s = _mul4_ss_(t1s,t2s);

  // z_100_50 = z_50_0^2^50
  i = 50;
  t2s = _it_sqr4_ss_(t2s, t1s, i);

  // z_100_0 = z_100_50*z_50_0
  t2s = _mul4_ss_(t2s, t1s);

  // z_200_100 = z_100_0^2^100
  i = 100;
  t3s = _it_sqr4_ss_(t3s, t2s, i);

  // z_200_0 = z_200_100*z_100_0
  t2s = _mul4_ss_(t2s,t3s);

  // z_250_50 = z_200_0^2^50
  i = 50;
  t2s = _it_sqr4_s_(t2s, i);

  // z_250_0 = z_250_50*z_50_0
  t1s = _mul4_ss_(t1s,t2s);

  // z_255_5 = z_250_0^2^5
  i = 4;
  t1s = _it_sqr4_s_(t1s, i);
  t1s = _sqr4_s_(t1s);

  // z_255_21 = z_255_5*z11
  t1s = _mul4_ss_(t1s, t0s);

  return t1s;
}

